hardening:

(
"Layers" framework:
DB (mysql)
+ FILE (filesys access vs file_put_contents)
+ DATA (post/get/file from user)
+ SESS (session stuff - timeouts, verification, etc)
+ HTML (output w/lotsa HTMLENTITIES + detection of revealing output - use Mustache?)
+ requiring HTTPS
)

make files read-only, .htaccess inaccessible, moving it above webroot, everything "old" must be moved out.
constantify config, except for usefully customizable ones.
make stuff 'final' - 'final public function'
taint testing
DB Deleted, Show Grants, etc - layer can even encrypt the whole works - everything that goes in is a string encrypted; everything out is reinterpreted - to be useful needs to encrypt entire JSON row; then it's sort of pointless. Plus can't sort. Only for weird things. Or maybe indiv fields like SSN
careful authorized-validation: don't only trust $_SESSION
use multi session verifications - cookie/session, sessid, mysql, separate sessids
MySQL: stored routines, only allow specific sets of instructions with parameters provided. Can even have stored routines hardcoded into class DB.
Object layer for user input: $_GET and $_POST to $GET->int("asdf") and $POST->string("fdsa") and $COOKIE->bool("asdf") also never use $_REQUEST; and $_SERVER sanitizer too. WebappFirewall-ish scanning for SQL/OS commands
file-access layer (disallow ../) verifying that it's in the webroot only and is a file-access-allowed file.
whitelist .htaccess file extensions
formatstrings
always htmlentities before output unless it's meant to be html, and very specifically.
often renew session-id - every 5 min
max size of url and http request and vars, and min, and well-formed
hide PHP-based-ness of platform
timing attacks - eg checking for userid => checking password
try to cache
slowdown: DoS? rate limiting
Configuration - PHP itself and patches
No unnecessary services enabled
No "default accounts"
use SSL
principle of least-privilege-needed, distrust-all-input
secure failure - requiring login
force order deny, allow
sanitize all output (no info disclosure) - e.g. when talking about settings or logged-in-as or etc [could even have an output object layer - nah, just do it in templateify() - make sure it's not prematurely ob_flush-ing]
Segment into distinct unrelated pieces
multi-layer security, redundancy
javascript validation on top of that
whitelist don't blacklist
sandboxing? honeypotting? sending confusion-reports? "accidental" fake db dumps?
OWASP "Stable Projects"
well-validated emailing and redirects and forwards
extremely restricted uploads
integrity checking code
login operations must operate in about the same amount of time whether right or wrong or in between
exception handling
input length limits - up to 20chars client and server enforced for username/pass
config.server.php, config.local.php, config.php include order, etc.
Unicode vulnerabilities - use iconv() in DB
Compensating for server vulns hm